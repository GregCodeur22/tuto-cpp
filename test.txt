#include <iostream>
#include <string>
using namespace std;

class Point
{
	int x;
	int y;
	
	public :
		Point(int x, int y)
		{
			this->x = x;
			this->y = y;
		}
		
		void display()
		{
			cout << "Point (" << x << " , " << y << ")" << endl;
		}

		void setX(int x)
		{
			if (x >= 0 && x <= 100)
				this->x = x;
		}

		void setY(int y)
		{
			if (y >= 0 && y <= 100)
				this->y = y;
		}

		int getX()
		{
			return (x);
		}

		int getY()
		{
			return (y);
		}

		void translate(int decalx, int decaly)
		{
			this->x += decalx;
			this->y += decaly;
		}		
};

int main()
{
	Point p = Point(5, 7);
	p.display();

	p.setX(75);
	p.display();
	
	p.setY(12);
	p.display();
	
	cout << p.getX() << ", " << p.getY() << endl;
	p.translate(-5, 10);
	p.display();

	return (0);
}


-----------------------------------------------------------------------------

#include <string>
#include <iostream>
using namespace std;

class Client
{
	private :
		string nom;
		string prenom;
		string adresse;
		
	public:
		Client(string nom, string prenoms, string addresse)
		{
			this->nom = nom;
			this->prenom = prenoms;
			this->adresse = addresse;
		}

				Client(string nom, string prenoms)
		{
			this->nom = nom;
			this->prenom = prenoms;
			this->adresse = "void";
		}
		
		void display()
		{
			cout << nom  << prenom << adresse << endl;
		}
		
};

int main()
{
	Client c1 = Client("Doe ", "John ");
	c1.display();	

	
	return (0);
}

-----------------------------------------------------------------------------------

gerer les destructeur 
#include <string>
#include <iostream>
using namespace std;

class Balise
{
	private :
		string nom;
		string contenu;
		
	public:
		Balise (string nom, string contenu)
		{
			this->nom = nom;
			this->contenu = contenu;
			cout << "< " << nom << ">" << endl;
			cout << "< " << contenu << ">" << endl;
		}
		
		~Balise()
		{
			cout << "</" << nom << ">" << endl;
			
		}
};

int main()
{
	Balise *b1 = new Balise("HTML ", "tuto c++");
	delete b1; // ont peut appeler le destructur avec la commande delete mais il faut passer l'objet en pointeur nouvelle syntaxe 
	cout << "je suis toujour dans le main" << endl;
	
	return (0);
}

------------------------------------------------------------------------------------
exemple de constructeur par copie 
#include <string>
#include <iostream>
using namespace std;

class Balise
{
	private :
		string nom;
		string contenu;
		
	public:
		/* Constructeur par parametres*/
		Balise (string nom, string contenu)
		{
			cout << "constructeur param" << endl;
			this->nom = nom;
			this->contenu = contenu;
			cout << "< " << nom << ">" << endl;
			cout << "< " << contenu << ">" << endl;
		}
		
		/* Constructeur par copie */
		Balise(const Balise& b)
		{
			cout << "constructeur copie" << endl;

			nom = b.nom;
			contenu = b.contenu;
			cout << "< " << nom << ">" << endl;
			cout << "< " << contenu << ">" << endl;
		}
		
		~Balise()
		{
			cout << "</" << nom << ">" << endl;
			
		}
};

int main()
{
	Balise b1 = Balise("HTML ", "tuto c++");
	Balise a = b1;
	
	return (0);
}

------------------------------------------------------------------------------------
polymorphisme
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/27 06:22:52 by garside           #+#    #+#             */
/*   Updated: 2025/07/27 19:54:16 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <string>
#include <iostream>
#include <vector>
using namespace std;

class Personne
{
	string nom;
	string prenoms;
	int age;
	int compteur;
	
	public:
		Personne(string nom, string prenoms, int age)
		{
			this->nom = nom;
			this->prenoms = prenoms;
			this->age = age;
			compteur++;
		}

		virtual void display()
		{
			cout << "************************************" << endl;
			cout << "Mon nom est " << nom << endl;
			cout << "Mon prenoms est " << prenoms << endl;
			cout << "Mon age est " << age << endl;
		}
		
		~Personne()
		{
			cout << "Nous somme navre de la disparition de la personne " << nom << endl;
		}
};

class Client : public Personne
{
	private:
		string adresse;
	
	public:
		Client(string n, string p, int a, string adr) : Personne(n, p, a)
		{
			adresse = adr;
		}
	
	void display() override
	{
		Personne::display();
		cout << "Mon adresse est  " << adresse << endl;
	}
};

class Fournisseur : public Personne
{
	private:
		string telephone;

	public:
		Fournisseur(string n, string p, int a, string tel) : Personne(n, p, a)
		{
			telephone = tel;
		}
	
	void display() override
	{
		Personne::display();
		cout << "Mon adresse est  " << telephone << endl;
	}
};

class Salarie : public Personne
{
	private:
		int niveau;

	public:
		Salarie(string n, string p, int a, int lvl) : Personne(n, p, a)
		{
			niveau = lvl;
		}

		void display() override final
	{
		Personne::display();
		cout << "Mon niveau est  " << niveau << endl;
	}
};

int main()
{
	
	Client *c = new Client("toto", "greg", 25, "rue de la paix");
	Fournisseur *f = new Fournisseur("david", "osmont", 25, "06 92 00 20 31");
	Salarie *s = new Salarie("claire", "tmli", 25, 5);

	Client c1 = Client("paul", "escobar", 34, "edouart vaillant");

	vector<Personne *> v;
	v.push_back(f);
	v.push_back(s);
	v.push_back(c);

	for (auto e : v)
	{
		e->display();
	}
	
	return (0);
}
 
